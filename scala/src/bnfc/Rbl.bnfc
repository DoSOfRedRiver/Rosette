Prog.                  Program ::= [Expr] ;

EMethod.               Expr ::= Method ;
ERMethod.              Expr ::= RMethod ;
EQuote.                Expr ::= Quote ;
EFree.                 Expr ::= Free ;
EGoto.                 Expr ::= GotoExpr ;
ESet.                  Expr ::= Set ;
ELabel.                Expr ::= Label ;
EString.               Expr ::= RString ;
ETuple.                Expr ::= Tuple ;
EBlock.                Expr ::= Block ;
ESeq.                  Expr ::= Seq ;
ELet.                  Expr ::= Let ;
ELetRec.               Expr ::= LetRec ;
EIf.                   Expr ::= IfExpr ;
EProc.                 Expr ::= Proc ;
EConstant.             Expr ::= Constant ;
EId.                   Expr ::= Id ;
EToken.                Expr ::= TokenExpr ;
ERequest.              Expr ::= Request ;

terminator Expr "" ;

-- Method

Method.                Method ::= TMethod Pattern Expr [Expr] CP ;

-- Reflective method

RMethod.               RMethod ::= TRmethod Pattern Expr [Expr] CP ;

-- Quote

Quote.                 Quote ::= "'" Expr ;
EscapedQuote.          Quote ::= "'\\" Constant ;

-- String

RString.               RString ::= TString ;

-- Tuple

Tuple.                 Tuple ::= "[" [Expr] "]" ;
TupleAnd.              Tuple ::= "[" [Expr] "&" Expr "]" ;

-- Block

Block.                 Block ::= TBlock Expr [Expr] CP ;

-- Seq

Seq.                   Seq ::= TSeq Expr [Expr] CP ;

-- Let

LetHeadId.             LetHead ::= "[" Id Expr "]" ;
LetHeadPtrn.           LetHead ::= "[" Pattern Expr "]" ;
LetRecHead.            LetRecHead ::= "[" Id Expr "]" ;

Let.                   Let ::= TLet "[" [LetHead] "]" Expr [Expr] CP ;

LetRec.                LetRec ::= TLetRec "[" [LetRecHead] "]" Expr [Expr] CP ;

terminator LetHead "" ;
terminator LetRecHead "" ;

-- If

IfExpr.                IfExpr ::= TIf Expr Expr CP ;

IfExprElse.            IfExpr ::= TIf Expr Expr Expr CP ;

-- Proc

Proc.                  Proc ::= TProc Pattern Expr CP ;

-- Miscellaneous forms

Free.                  Free ::= TFree "[" [Id] "]" Expr [Expr] CP ;

GotoExpr.              GotoExpr ::= TGoto Id CP ;

Set.                   Set ::= TSet Id Expr CP ;

Label.                 Label ::= TLabel Id Expr [Expr] CP ;

-- Constant

CTrue.                 CBool ::= "#t" ;
CFalse.                CBool ::= "#f" ;
CBoolean.              Constant ::= CBool ;
CFixnum.               Constant ::= Integer ;
CFloat.                Constant ::= Double ;
CChar.                 Constant ::= TChar ;
CCharEscaped.          Constant ::= TEscapeChar ;
CAbsent.               Constant ::= "#absent" ;
CEof.                  Constant ::= "#eof" ;
CNiv.                  Constant ::= "#niv" ;
CReadError.            Constant ::= "#read-error" ;
CIncompleteIo.         Constant ::= "#incomplete-io" ;

-- Request

Request.               Request ::= OP Expr Clause CP ;
RequestProc.           Request ::= TProc Clause CP ;
RequestFree.           Request ::= TFree Clause CP ;
RequestGoto.           Request ::= TGoto Clause CP ;
RequestSet.            Request ::= TSet Clause CP ;
RequestLabel.          Request ::= TLabel Clause CP ;
RequestLet.            Request ::= TLet Clause CP ;
RequestLetRec.         Request ::= TLetRec Clause CP ;
RequestMethod.         Request ::= TMethod Clause CP ;
RequestRmethod.        Request ::= TRmethod Clause CP ;

Send.                  Request ::= TSend Expr Clause CP ;

EClause.               Clause ::= [Expr] ;
EClauseAnd.            Clause ::= [Expr] "&" Expr ;

-- Id

Id.                    Id ::= Atom ;

terminator Id "" ;

-- Atom

TokenExpr.             TokenExpr ::=  Atom ;

-- Message pattern

Pattern.               Pattern ::= "[" [Expr] "]" ;
PatternAnd.            Pattern ::= "[" [Expr] "&" Expr "]" ;

-- Lexer rules (order matters)

token TSend ( '(' ' '* {"send"} ) ;

token TBlock ( '(' ' '* {"block"} ) ;

token TSeq ( '(' ' '* {"seq"} ) ;

token TLet ( '(' ' '* {"let"} ) ;

token TLetRec ( '(' ' '* {"letrec"} ) ;

token TIf ( '(' ' '* {"if"} ) ;

token TMethod ( '(' ' '* {"method"} ) ;

token TRmethod ( '(' ' '* {"rmethod"} ) ;

token TProc ( '(' ' '* {"proc"} ) ;

token TFree ( '(' ' '* {"free"} ) ;

token TGoto ( '(' ' '* {"goto"} ) ;

token TSet ( '(' ' '* {"set!"} ) ;

token TLabel ( '(' ' '* {"label"} ) ;

token OP '(' ;

token CP ')' ;

token TString ( '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ) ;

token TChar ( {"#\\"} char ) ;

token TEscapeChar ( {"#\\\\"} ('n' | 'r' | 't' | 'f' | '\\' | 'x' ["0123456789abcdefABCDEF"] ["0123456789abcdefABCDEF"] ) ) ;

token Atom ( (letter | digit | '+' | '-' | '*' | '/' | '<' | '=' | '>' | '!' | '?' | '$' | '%' | '_' | '~' | '^' | '&' | ':' | '\\' | '.' | '@' | ',' | '`' ) (letter | digit | '+' | '-' | '*' | '/' | '<' | '=' | '>' | '!' | '?' | '$' | '%' | '_' | '~' | '^' | '&' | ':' | '\\' | '.' | '@' | ',' | '`'| '\'')* ) ;

comment ";" ;
